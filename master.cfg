# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
from dashboard import dash

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("example-worker", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(
    changes.GitPoller(
        'git://github.com/buildbot/hello-world.git',
        workdir='gitpoller-workdir',
        branch='master',
        project='hello-world',
        pollinterval=300))
c['change_source'].append(
    changes.PBChangeSource(port=8016, user='change', passwd='changepw'))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name="all",
        change_filter=util.ChangeFilter(branch='master'),
        treeStableTimer=None,
        builderNames=["runtests"]))
c['schedulers'].append(
    schedulers.Try_Userpass(
        name="dashboard try scheduler",
        builderNames=["runtests", "runtests0", "runtests1"],
        port=8031,
        userpass=[("change", "changepw")]))
c['schedulers'].append(
    schedulers.ForceScheduler(name="force", builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

from builders.steps import trial

thesis_factory = util.BuildFactory()
thesis_factory.addSteps([
    steps.Git(
        repourl='https://github.com/GabrielNagy/thesis-documentation.git',
        mode='full',
        submodules=True),
])

# check out the source
factory = util.BuildFactory()
factory.addSteps([
    steps.Git(
        repourl='git://github.com/buildbot/hello-world.git',
        mode='incremental', env={"http_proxy": "", "https_proxy": ""}),
    trial.Trial(command=["trial", "hello"], env={
        "PYTHONPATH": "."
    })
])

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(
        name="runtests",
        workernames=["example-worker"],
        tags=["hello-world"],
        factory=factory))

c['builders'].append(
    util.BuilderConfig(
        name="runtests0",
        workernames=["example-worker"],
        tags=["hello-world"],
        factory=factory))

c['builders'].append(
    util.BuilderConfig(
        name="runtests1",
        workernames=["example-worker"],
        tags=["hello-world"],
        factory=factory))

# c['builders'].append(
#     util.BuilderConfig(
#         name="thesis-documentation",
#         workernames=["example-worker"],
#         tags=["emacs"],
#         factory=thesis_factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []
c['services'].append(reporters.Prometheus(port=9101))

from services import mailnotifier

mailMap = {
    'cross_ci': 'gabriel.nagy@nokia.com',
}

m = reporters.MailNotifier(
    fromaddr="gnagy@localhost",
    tags=["hello-world"],
    sendToInterestedUsers=True,
    lookup=mailnotifier.IcdCslToEmail(mailMap),
    extraRecipients=["gnagy@localhost.com"],
    buildSetSummary=True,
    messageFormatter=reporters.MessageFormatter(
        template=mailnotifier.template,
        template_type='html',
        wantProperties=True,
        wantSteps=True))
c['services'].append(m)
####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Hello World CI"
c['titleURL'] = "https://buildbot.github.io/hello-world/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(
    port=8010,
    plugins=dict(
        waterfall_view={}, console_view={}, grid_view={}, angular_dashboard={}))

c['www']['plugins']['wsgi_dashboards'] = []
c['www']['plugins'][
    'wsgi_dashboards'].append(    # This is a list of dashboards, you can create several
        {
            'name': 'flaskdashboard',    # as used in URLs
            'caption': 'Flask Dashboard',    # Title displayed in the UI'
            'app': dash.dashapp,
    # priority of the dashboard in the left menu (lower is higher in the
    # menu)
            'order': 5,
    # available icon list can be found at http://fontawesome.io/icons/
            'icon': 'bars'
        })

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}
